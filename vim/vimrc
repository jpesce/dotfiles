" Use vim settings instead of vi. Must be first, because it changes other
" options as a side effect.
set nocompatible
" Set <leader> to space
let mapleader = " "

" Plugins {{{
" Cheat cheat with <leader>?
packadd vim-cheat40
" Previous `[`, next `]` and toggle `y` mappings (see :h unimpaired)
packadd vim-unimpaired
" `%` recognize language-specific words
packadd vim-matchup

" Snippets
packadd vim-minisnip
" Code linting and fixing
packadd ale


" Currently developing a theme
" Toolkit for color scheme design
packadd vim-colortemplate
" Show/hide highlight stack with :HLT!
packadd vim-hilinks
" }}}

" File type support {{{
packadd vim-polyglot
packadd vim-jsonc
" }}}

" Themes {{{
packadd photon.vim
" }}}

" Sensible Defaults {{{
filetype plugin indent on       " Be aware of file types
syntax enable                   " Enable syntax highlight
set wildmenu                    " Show a selection menu when completing commands
set splitright splitbelow       " Defaults splitting to the right and below
set autoread                    " Automatically reload modified files
set encoding=utf-8 spelllang=en " UTF-8 and English as default
set formatoptions+=j            " Delete comment characters when joining lines
set hidden                      " Buffers are only hidden, not closed
set backspace=indent,eol,start  " Backspace works over everything in insert mode
set nrformats-=octal            " Don't assume as octals numbers starting with 0
set lazyredraw                  " Don't update the display while running macros
set display+=lastline           " Better display overflowing lines
set ttimeout                    " Time waited for key press to complete...
set ttimeoutlen=50              " ...it makes for a faster key response.
" }}}

" Not so sensible defaults :-) {{{
" Enable OMNI Completion (<C-X><X-O) for known language keywords
set omnifunc=syntaxcomplete#Complete
" Recursively add project's directories to path to make it easy to :find files
set path+=**
" Yanking, deleting and pasting work with the clipboard
set clipboard=unnamed
" Cursor always in the middle
set scrolloff=1000
" Remove trailing lines and white spaces on exit
autocmd BufWritePre * %s/\s\+$//e
" Consider '-' part of a word
set iskeyword+=-
" Don't use swap and backup files
set noswapfile nobackup
" Instead, keep undo history on a directory so you can always undo (U) even
" after the file is closed or the computer rebooted
set undodir=~/.vim/undo-history
set undofile
" }}}

" Search {{{
" Highlight all matches of the current search
set incsearch hlsearch
" If the term has uppercase, search with case sensitivity, otherwise ignore case
set smartcase ignorecase
" <C-L> clears search and rerenders everything
" https://github.com/tpope/vim-sensible/blob/master/plugin/sensible.vim
nnoremap <C-l> :nohlsearch<CR>:diffupdate<CR>:syntax sync fromstart<CR><C-L>
" }}}

" Indentation {{{
" Tab size is 2 spaces for tabs, spaces and shift indentation command (< and >)
set tabstop=2 softtabstop=2 shiftwidth=2
" Try to automatically indent next lines smartly
set autoindent smartindent
" Convert tab into spaces and erase spaces smartly as though they were tabs
set expandtab smarttab
" When indenting with < > in Visual mode continue with the selection
vnoremap > >gv
vnoremap < <gv
" }}}

" Line width {{{
" Responsible line breaking at column 80. Don't automatically break text upon
" reaching it. Use `gq` where and when needed.
set textwidth=80
set formatoptions-=t
" Highlight text that exceeds 80 characters instead of showing a colored column.
"set colorcolumn=81
"match ColorColumn "\%>80v.\+"
" }}}

" Visuals {{{
" Color scheme
set background=dark
set t_Co=256
colorscheme essential
" Show relative line numbers except for the current line
set relativenumber number
" Hide vim intro
set shortmess+=I
" Show what you are currently typing on the ruler
set showcmd
" Redefine filling characters on vertical split and status line
set fillchars+=vert:\           "│ to make a vertical line
set fillchars+=stl:\ ,stlnc:\   " ─ to make a horizontal line

" Ruler is only current line and column
set rulerformat=%7(%l:%c%)
" Status line is filename and line:column
set statusline =\ \ %f\ %m\ \   " Filename and modified indicator
set statusline+=%=              " Spacer
set statusline+=☰\ %l:%c\ \     " Line and column
" Always show status line
set laststatus=1
" }}}

" Folding {{{
set foldmethod=syntax
" Start unfolded
set foldlevelstart=99
" Fold text is only the line content and a plus sign
let FoldText = { -> getline(v:foldstart) . ' ﹢ '  }
set foldtext=FoldText()
" }}}

" File explorer (:Vexp) {{{
" Don't show info on top
let g:netrw_banner = 0
" Resize splits to 20%
let g:netrw_winsize = 20
" }}}

" Matchup {{{
" Don't replace status line with the matching term when it's offscreen
let g:matchup_matchparen_offscreen = {'method': 'status_manual'}
" }}}

" Grepping {{{
" Use ripgrep as :grep program
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif
" Grep silently
cnoreabbrev <expr> grep  (getcmdtype() ==# ':' && getcmdline() =~# '^grep')  ? 'silent grep'  : 'grep'
cnoreabbrev <expr> lgrep (getcmdtype() ==# ':' && getcmdline() =~# '^lgrep') ? 'silent lgrep' : 'lgrep'
" }}}

" ALE code linting {{{
" Always show sign columns
set signcolumn=yes
" Don't highlight the code
let g:ale_set_highlights = 0
" Prettier signs
let g:ale_sign_error = '●'
let g:ale_sign_warning = '●'
" Define linters manually
let g:ale_linters_explicit = 1
let g:ale_linters = {
      \ 'ruby': ['rubocop'],
      \ 'javascript': ['eslint'],
      \ 'css': ['stylelint']
      \ }
" Define fixers for :ALEFix
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'css': ['stylelint'],
      \ 'json': ['jq'], 'jsonc': ['jq']
      \ }
" }}}

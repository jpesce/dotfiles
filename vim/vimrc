" Use vim settings instead of vi. Must be first, because it changes other
" options as a side effect.
set nocompatible
" Set <leader> to space
let mapleader = " "

" Plugins {{{
" Cheatcheat with <leader>?
packadd vim-cheat40
" `[`, `]` and `y` mappings
packadd vim-unimpaired
" `%` recognize language-specific words
packadd vim-matchup

" Snippets
packadd vim-minisnip
" Code linting
packadd ale

" Currently developing a theme
" Toolkit for colorscheme design
packadd vim-colortemplate
" Toggle showing highlight stack with :HLT!
packadd vim-hilinks
" }}}

" Filetype support {{{
" Lots of languages support
packadd vim-polyglot
packadd vim-jsonc
" }}}

" Themes {{{
packadd vim-colors-plain
packadd photon.vim
packadd tokyonight-vim
" }}}

" Sensible Defaults {{{
" Enable syntax detection
filetype plugin indent on
syntax enable
" Show a selection menu when completing commands
set wildmenu
" Defaults splitting to the right and below
set splitright splitbelow
" Automatically reload files that have been modified outside of vim
set autoread
" UTF-8 and English as default
set encoding=utf-8 spelllang=en
" Delete comment character when joining commented lines
set formatoptions+=j
" Buffers are only hidden, not closed
set hidden
" Backspace works over every thing
set backspace=indent,eol,start
" Don't consider numbers stating with zeros to be octals
set nrformats-=octal
" Don't update the display while executing macros
set lazyredraw
" Better handles lines that overflow at the end of the screen
set display+=lastline
" Time waited for key press to complete. It makes for a faster key response.
set ttimeout
set ttimeoutlen=50
" }}}

" Not so sensible defaults :-) {{{
" Enable OMNI Completion for known keywords (<C-X><C-O> while on insert mode)
set omnifunc=syntaxcomplete#Complete
" Recursively add project's directories to path to make it easy to find files
set path+=**
" Operations such as yanking, deleting and pasting work with the clipboard
set clipboard=unnamed
" Cursor always in the middle
set scrolloff=1000
" Remove trailing lines and white spaces on exit
autocmd BufWritePre * %s/\s\+$//e
" Consider '-' part of a word
set iskeyword+=-
" }}}

" Backups {{{
" Don't use swap and backup files
set noswapfile nobackup
" Instead, keep undo history on a directory so you can always undo (U) even
" after the file is closed or the computer rebooted
set undodir=~/.vim/undo-history
set undofile
" }}}

" Search {{{
" Highlight all matches of current search
set incsearch hlsearch
" When searching, if the term has an uppercase letter, search with case
" sensitivity, otherwise ignore case
set smartcase ignorecase
" <C-L> to clear the search highlights
" https://github.com/tpope/vim-sensible/blob/master/plugin/sensible.vim
nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
" }}}

" Indentation {{{
" Tab size is two spaces for tabs, spaces and shift indenting command (< and >)
set tabstop=2 softtabstop=2 shiftwidth=2
" Try to automatically indent next lines smartly
set autoindent smartindent
" Convert tab into spaces and erase spaces smartly as though they were tabs
set expandtab smarttab
" }}}

" Line width {{{
" Responsible line breaking at column 80. Highlight the column but don't break
" text upon reaching it.
set textwidth=80
set formatoptions-=t
" Highlight text that exceeds 80 characters instead of showing a colored column.
"set colorcolumn=81
match ColorColumn "\%>80v.\+"
" }}}

" Visuals {{{
set background=dark
set t_Co=256
colorscheme essential_dev
"colorscheme plain
"colorscheme plain-cterm
"colorscheme photon
"colorscheme tokyonight

" Show relative line numbers + current line number
set relativenumber number
" Don't show vim intro
set shortmess+=I
" Ruler is only current line and column
set rulerformat=%7(%l:%c%)
" Show what you are typing on the ruler
set showcmd

" Redefine vertical split and status line characters
set fillchars+=vert:\           " │ to make a vertical line
set fillchars+=stl:\ ,stlnc:\   " ─ to make a horizontal line
" Status line is filename and line:column
" Filename in the active buffer is evident and on inactive buffers is opaque
function! ActiveStatus()
  let statusline=""
  let statusline.="%#TabLineSel#"
  let statusline.="\ \ %f\ %m\ \ "
  let statusline.="%0*%="
  let statusline.="\ \ %l:%c\ \ "
  return statusline
endfunction
function! InactiveStatus()
  let statusline=""
  let statusline.="%0*"
  let statusline.="\ \ %f\ %m\ \ "
  return statusline
endfunction
set statusline=%!ActiveStatus()
augroup status
  autocmd!
  autocmd WinEnter * setlocal statusline=%!ActiveStatus()
  autocmd WinLeave * setlocal statusline=%!InactiveStatus()
augroup END
" Always show status line
set laststatus=2

" When entering insert show cursor line and when exiting hide it
au InsertEnter * set cursorline
au InsertLeave * set nocursorline
" }}}

" Folding {{{
set foldmethod=syntax
" Start unfolded
set foldlevelstart=99
" Fold text is only the line content and a plus sign
let FoldText = { -> getline(v:foldstart) . ' ﹢ '  }
set foldtext=FoldText()
" }}}

" File Types Specifics {{{
" zsh
au BufNewFile,BufRead *.zshrc,*.zsh,*.zsh-theme set filetype=zsh
" vimrc
au BufNewFile,BufRead vimrc set foldmethod=marker
" }}}

" File explorer (:Vexp) {{{
" Don't show info on top
let g:netrw_banner = 0
" Use tree view
let g:netrw_liststyle = 3
" Resize to 20%
let g:netrw_winsize = 20
" }}}

" Ripgrep {{{
" Use ripgrep as searching program
set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
" }}}

" ALE - Code Linting {{{
" Always show sign columns
set signcolumn=yes
" Don't highlight
let g:ale_set_highlights = 0
" Prettier signs
let g:ale_sign_error = '●'
let g:ale_sign_warning = '●'
" Define linters manually
let g:ale_linters = {
      \ 'ruby': ['rubocop'],
      \ 'javascript': ['eslint'],
      \ 'css': ['stylelint']
      \ }
let g:ale_linters_explicit = 1
" Define fixers for ALEFix
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'css': ['stylelint']
      \ }
" }}}

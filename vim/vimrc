" Use vim settings instead of vi. Must be first, because it changes other
" options as a side effect.
set nocompatible
" Set <leader> to space
let mapleader = " "

" Plugins {{{
" Cheatcheat with <leader>?
packadd vim-cheat40
" Sensible defaults
packadd vim-sensible
" `[`, `]` and `y` mappings
packadd vim-unimpaired
" `%` recognize language-specific words
packadd vim-matchup
" Buffers in tabline
packadd vim-buftabline
" Code linting
packadd ale
" Fuzzy finder
packadd fzf.vim
set rtp+=/usr/local/opt/fzf

" Currently developing a theme
" Toolkit for colorscheme design
packadd vim-colortemplate
" Toggle showing highlight stack with :HLT!
packadd vim-hilinks
" }}}

" Filetype support {{{
" Lots of languages support
packadd vim-polyglot
packadd vim-jsonc
" }}}

" Themes {{{
packadd vim-colors-plain
packadd photon.vim
packadd tokyonight-vim
" }}}

" Sensible Defaults {{{
" Default to english
set spelllang=en
" Fast terminal connection
set ttyfast
" Don't update the display while executing macros
set lazyredraw
" Enable enhanced completion for commands
set wildmenu
" Enable OMNI Completion for know keywords (<C-X><C-O> while in Insert Mode)
set omnifunc=syntaxcomplete#Complete
" Highlight all matches of current search
set hlsearch
" Buffers are only hidden, not closed
set hidden
" Defaults splitting to the right and below
set splitright splitbelow
" }}}

" Not so sensible defaults :-) {{{
" When searching, if the term has an uppercase letter, search with case
" sensitivity, otherwise ignore case
set smartcase ignorecase
" Operations such as yanking, deleting and pasting work with the clipboard
set clipboard=unnamed
" Cursor always in the middle
set scrolloff=1000
" Remove trailing lines and whitespaces on exit
autocmd BufWritePre * %s/\s\+$//e
" }}}

" Remaps {{{
" FZF files, buffers and ripgrep the entire project
map <leader>e :Files<CR>
map <leader>b :Buffers<CR>
nmap <Leader>/ :Rg<Space>
" }}}

" Backups {{{
" Don't use swap and backup files
set noswapfile nobackup
" Instead, keep undo history on a directory so you can always undo (U) even
" after the file is closed or the computer rebooted
set undodir=~/.vim/undo-history
set undofile
" }}}

" Visuals {{{
set background=dark
set t_Co=256
colorscheme essential_dev
"colorscheme plain
"colorscheme plain-cterm
"colorscheme photon
"colorscheme tokyonight

" Redefine vertical split and statusline characters
set fillchars+=vert:\         " │ to make a vertical line
set fillchars+=stl:─,stlnc:─  " ─ to make a horizontal line
" Show relative line number + line numbers
set relativenumber number
" Don't show vim intro
set shortmess+=I
" Show statusline only if there are more than one split
set laststatus=1
" Ruler is only current line and column
set rulerformat=%7(%l:%c%)
" Statuslien is only filename
set statusline=%0*\ \ %f\ \  " Filename

" When entering insert show cursorline and when exiting hide it
au InsertEnter * set cursorline
au InsertLeave * set nocursorline

" Customize fzf colors
let g:fzf_colors =
    \ { 'fg':      ['fg', 'Comment'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Search'],
      \ 'fg+':     ['fg', 'Normal'],
      \ 'bg+':     ['bg', 'Terminal'],
      \ 'hl+':     ['fg', 'Search'],
      \ 'info':    ['bg', 'Terminal'],
      \ 'border':  ['fg', 'NonText'],
      \ 'prompt':  ['fg', 'Directory'],
      \ 'pointer': ['bg', 'Terminal'],
      \ 'marker':  ['fg', 'WarningMsg'],
      \ 'spinner': ['fg', 'Normal'],
      \ 'header':  ['fg', 'Normal'] }
" }}}

" Indentation {{{
" Tab size is two spaces for tabs, spaces and shift indenting command (< and >)
set tabstop=2 softtabstop=2 shiftwidth=2
" Convert tab into spaces
set expandtab
" Try to automatically indent next lines smartly
set smartindent
" }}}

" Line width {{{
" Responsible linebreaking at column 80. Highlight the column but don't break
" text upon reaching it.
set textwidth=80
set formatoptions-=t
" Highlight text that exceeds 80 characters intead of showing a colored column.
"set colorcolumn=81
match ColorColumn "\%>80v.\+"
" }}}

" Folding {{{
set foldmethod=syntax
" Start file unfolded
set foldlevelstart=99
" Minimal fold text format with only the line content and a plus sign
let FoldText = { -> getline(v:foldstart) . ' ﹢ '  }
set foldtext=FoldText()
" }}}

" BufferTabLine {{{
" Show if file has been modified
let g:buftabline_indicators = 1
" }}}

" File Types Specifics {{{
" Help identify some zsh-related files
au BufNewFile,BufRead *.zshrc,*.zsh,*.zsh-theme set filetype=zsh
" vimrc
au BufNewFile,BufRead vimrc set foldmethod=marker
" }}}

" File explorer (:Vexp) {{{
" Don't show more info on top
let g:netrw_banner = 0
" Use tree view
let g:netrw_liststyle = 3
" Open file on the main window
let g:netrw_browse_split = 4
let g:netrw_altv = 1
" Resize to 20%
let g:netrw_winsize = 20
" }}}

" ALE - Code Linting {{{
" Always show sign columns
set signcolumn=yes
" Define linters manually
let g:ale_linters = {
      \ 'ruby': ['rubocop'],
      \ 'javascript': ['eslint'],
      \ 'css': ['stylelint']
      \ }
let g:ale_linters_explicit = 1
" Define fixers for ALEFix
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'css': ['stylelint']
      \ }
" }}}
